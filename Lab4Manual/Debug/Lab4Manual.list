
Lab4Manual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003054  08003054  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003054  08003054  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003054  08003054  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003058  08003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800305c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000404  2000000c  08003068  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08003068  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b577  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca4  00000000  00000000  0002b5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002d250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002ded0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017597  00000000  00000000  0002ea98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c431  00000000  00000000  0004602f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000884a9  00000000  00000000  00052460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da909  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000346c  00000000  00000000  000da95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f44 	.word	0x08002f44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f44 	.word	0x08002f44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <setTimer1>:
int timer2_flag = 0;

int timer1_counter = 0;
int timer2_counter = 0;

void setTimer1( int duration){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <setTimer1+0x20>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800016a:	4b05      	ldr	r3, [pc, #20]	; (8000180 <setTimer1+0x24>)
 800016c:	2200      	movs	r2, #0
 800016e:	601a      	str	r2, [r3, #0]
}
 8000170:	bf00      	nop
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000030 	.word	0x20000030
 8000180:	20000028 	.word	0x20000028

08000184 <timerRun>:
void clearTimer2(){
	timer1_counter = 0;
	timer1_flag = 0;
}

void timerRun(){
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000188:	4b11      	ldr	r3, [pc, #68]	; (80001d0 <timerRun+0x4c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	dd0b      	ble.n	80001a8 <timerRun+0x24>
		timer1_counter--;
 8000190:	4b0f      	ldr	r3, [pc, #60]	; (80001d0 <timerRun+0x4c>)
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	3b01      	subs	r3, #1
 8000196:	4a0e      	ldr	r2, [pc, #56]	; (80001d0 <timerRun+0x4c>)
 8000198:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800019a:	4b0d      	ldr	r3, [pc, #52]	; (80001d0 <timerRun+0x4c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	dc02      	bgt.n	80001a8 <timerRun+0x24>
			timer1_flag = 1;
 80001a2:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <timerRun+0x50>)
 80001a4:	2201      	movs	r2, #1
 80001a6:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <timerRun+0x54>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	dd0b      	ble.n	80001c8 <timerRun+0x44>
		timer2_counter--;
 80001b0:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <timerRun+0x54>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	3b01      	subs	r3, #1
 80001b6:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <timerRun+0x54>)
 80001b8:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 80001ba:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <timerRun+0x54>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	dc02      	bgt.n	80001c8 <timerRun+0x44>
			timer2_flag = 1;
 80001c2:	4b06      	ldr	r3, [pc, #24]	; (80001dc <timerRun+0x58>)
 80001c4:	2201      	movs	r2, #1
 80001c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	20000030 	.word	0x20000030
 80001d4:	20000028 	.word	0x20000028
 80001d8:	20000034 	.word	0x20000034
 80001dc:	2000002c 	.word	0x2000002c

080001e0 <LEDInit>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDInit(void){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2101      	movs	r1, #1
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <LEDInit+0x3c>)
 80001ea:	f001 f90b 	bl	8001404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2102      	movs	r1, #2
 80001f2:	480a      	ldr	r0, [pc, #40]	; (800021c <LEDInit+0x3c>)
 80001f4:	f001 f906 	bl	8001404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2104      	movs	r1, #4
 80001fc:	4807      	ldr	r0, [pc, #28]	; (800021c <LEDInit+0x3c>)
 80001fe:	f001 f901 	bl	8001404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8000202:	2201      	movs	r2, #1
 8000204:	2108      	movs	r1, #8
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <LEDInit+0x3c>)
 8000208:	f001 f8fc 	bl	8001404 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, 1);
 800020c:	2201      	movs	r2, #1
 800020e:	2110      	movs	r1, #16
 8000210:	4802      	ldr	r0, [pc, #8]	; (800021c <LEDInit+0x3c>)
 8000212:	f001 f8f7 	bl	8001404 <HAL_GPIO_WritePin>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010c00 	.word	0x40010c00

08000220 <Toggle_Led1>:

uint8_t var[30];
int time_Stamp = 0;
//char str[50];
void Toggle_Led1(){
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0
	/* Toggle led */
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000226:	2101      	movs	r1, #1
 8000228:	481e      	ldr	r0, [pc, #120]	; (80002a4 <Toggle_Led1+0x84>)
 800022a:	f001 f903 	bl	8001434 <HAL_GPIO_TogglePin>
	/* Create String to display on terminal */
	uint8_t showTimeStamp[30] = {"Task1: "};
 800022e:	4a1e      	ldr	r2, [pc, #120]	; (80002a8 <Toggle_Led1+0x88>)
 8000230:	463b      	mov	r3, r7
 8000232:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000236:	e883 0003 	stmia.w	r3, {r0, r1}
 800023a:	f107 0308 	add.w	r3, r7, #8
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]
 800024a:	829a      	strh	r2, [r3, #20]
	itoa(time_Stamp*10, var, 10);
 800024c:	4b17      	ldr	r3, [pc, #92]	; (80002ac <Toggle_Led1+0x8c>)
 800024e:	681a      	ldr	r2, [r3, #0]
 8000250:	4613      	mov	r3, r2
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4413      	add	r3, r2
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	220a      	movs	r2, #10
 800025a:	4915      	ldr	r1, [pc, #84]	; (80002b0 <Toggle_Led1+0x90>)
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fe15 	bl	8002e8c <itoa>
	strcat(showTimeStamp, var);
 8000262:	463b      	mov	r3, r7
 8000264:	4912      	ldr	r1, [pc, #72]	; (80002b0 <Toggle_Led1+0x90>)
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fe1a 	bl	8002ea0 <strcat>
	strcat(showTimeStamp, "ms\r\n");
 800026c:	463b      	mov	r3, r7
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ff6c 	bl	800014c <strlen>
 8000274:	4603      	mov	r3, r0
 8000276:	461a      	mov	r2, r3
 8000278:	463b      	mov	r3, r7
 800027a:	4413      	add	r3, r2
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <Toggle_Led1+0x94>)
 800027e:	6810      	ldr	r0, [r2, #0]
 8000280:	6018      	str	r0, [r3, #0]
 8000282:	7912      	ldrb	r2, [r2, #4]
 8000284:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, &showTimeStamp[0], strlen(showTimeStamp), 100);
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ff5f 	bl	800014c <strlen>
 800028e:	4603      	mov	r3, r0
 8000290:	b29a      	uxth	r2, r3
 8000292:	4639      	mov	r1, r7
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	4808      	ldr	r0, [pc, #32]	; (80002b8 <Toggle_Led1+0x98>)
 8000298:	f002 f931 	bl	80024fe <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart2, str, sprintf(str, "%s %d","Hello\r\n ", time_Stamp ), 100);
}
 800029c:	bf00      	nop
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	08002f64 	.word	0x08002f64
 80002ac:	20000038 	.word	0x20000038
 80002b0:	20000040 	.word	0x20000040
 80002b4:	08002f5c 	.word	0x08002f5c
 80002b8:	200000a8 	.word	0x200000a8

080002bc <Toggle_Led2>:
void Toggle_Led2(){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
	/* Toggle led */
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80002c2:	2102      	movs	r1, #2
 80002c4:	481e      	ldr	r0, [pc, #120]	; (8000340 <Toggle_Led2+0x84>)
 80002c6:	f001 f8b5 	bl	8001434 <HAL_GPIO_TogglePin>
	/* Create String to display on terminal */
	uint8_t showTimeStamp[30] = {"Task2: "};
 80002ca:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <Toggle_Led2+0x88>)
 80002cc:	463b      	mov	r3, r7
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80002d6:	f107 0308 	add.w	r3, r7, #8
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]
 80002e6:	829a      	strh	r2, [r3, #20]
	itoa(time_Stamp*10, var, 10);
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <Toggle_Led2+0x8c>)
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	4613      	mov	r3, r2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4413      	add	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	220a      	movs	r2, #10
 80002f6:	4915      	ldr	r1, [pc, #84]	; (800034c <Toggle_Led2+0x90>)
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fdc7 	bl	8002e8c <itoa>
	strcat(showTimeStamp, var);
 80002fe:	463b      	mov	r3, r7
 8000300:	4912      	ldr	r1, [pc, #72]	; (800034c <Toggle_Led2+0x90>)
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fdcc 	bl	8002ea0 <strcat>
	strcat(showTimeStamp, "ms\r\n");
 8000308:	463b      	mov	r3, r7
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff1e 	bl	800014c <strlen>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	463b      	mov	r3, r7
 8000316:	4413      	add	r3, r2
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <Toggle_Led2+0x94>)
 800031a:	6810      	ldr	r0, [r2, #0]
 800031c:	6018      	str	r0, [r3, #0]
 800031e:	7912      	ldrb	r2, [r2, #4]
 8000320:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, &showTimeStamp[0], strlen(showTimeStamp), 100);
 8000322:	463b      	mov	r3, r7
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff11 	bl	800014c <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	b29a      	uxth	r2, r3
 800032e:	4639      	mov	r1, r7
 8000330:	2364      	movs	r3, #100	; 0x64
 8000332:	4808      	ldr	r0, [pc, #32]	; (8000354 <Toggle_Led2+0x98>)
 8000334:	f002 f8e3 	bl	80024fe <HAL_UART_Transmit>
}
 8000338:	bf00      	nop
 800033a:	3720      	adds	r7, #32
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40010c00 	.word	0x40010c00
 8000344:	08002f84 	.word	0x08002f84
 8000348:	20000038 	.word	0x20000038
 800034c:	20000040 	.word	0x20000040
 8000350:	08002f5c 	.word	0x08002f5c
 8000354:	200000a8 	.word	0x200000a8

08000358 <Toggle_Led3>:
void Toggle_Led3(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
	/* Toggle led */
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800035e:	2104      	movs	r1, #4
 8000360:	481e      	ldr	r0, [pc, #120]	; (80003dc <Toggle_Led3+0x84>)
 8000362:	f001 f867 	bl	8001434 <HAL_GPIO_TogglePin>
	/* Create String to display on terminal */
	uint8_t showTimeStamp[30] = {"Task3: "};
 8000366:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <Toggle_Led3+0x88>)
 8000368:	463b      	mov	r3, r7
 800036a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800036e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
 8000382:	829a      	strh	r2, [r3, #20]
	itoa(time_Stamp*10, var, 10);
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <Toggle_Led3+0x8c>)
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	4613      	mov	r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	4413      	add	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	220a      	movs	r2, #10
 8000392:	4915      	ldr	r1, [pc, #84]	; (80003e8 <Toggle_Led3+0x90>)
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fd79 	bl	8002e8c <itoa>
	strcat(showTimeStamp, var);
 800039a:	463b      	mov	r3, r7
 800039c:	4912      	ldr	r1, [pc, #72]	; (80003e8 <Toggle_Led3+0x90>)
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fd7e 	bl	8002ea0 <strcat>
	strcat(showTimeStamp, "ms\r\n");
 80003a4:	463b      	mov	r3, r7
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fed0 	bl	800014c <strlen>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461a      	mov	r2, r3
 80003b0:	463b      	mov	r3, r7
 80003b2:	4413      	add	r3, r2
 80003b4:	4a0d      	ldr	r2, [pc, #52]	; (80003ec <Toggle_Led3+0x94>)
 80003b6:	6810      	ldr	r0, [r2, #0]
 80003b8:	6018      	str	r0, [r3, #0]
 80003ba:	7912      	ldrb	r2, [r2, #4]
 80003bc:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, &showTimeStamp[0], strlen(showTimeStamp), 100);
 80003be:	463b      	mov	r3, r7
 80003c0:	4618      	mov	r0, r3
 80003c2:	f7ff fec3 	bl	800014c <strlen>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	4639      	mov	r1, r7
 80003cc:	2364      	movs	r3, #100	; 0x64
 80003ce:	4808      	ldr	r0, [pc, #32]	; (80003f0 <Toggle_Led3+0x98>)
 80003d0:	f002 f895 	bl	80024fe <HAL_UART_Transmit>
}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40010c00 	.word	0x40010c00
 80003e0:	08002fa4 	.word	0x08002fa4
 80003e4:	20000038 	.word	0x20000038
 80003e8:	20000040 	.word	0x20000040
 80003ec:	08002f5c 	.word	0x08002f5c
 80003f0:	200000a8 	.word	0x200000a8

080003f4 <Toggle_Led4>:
void Toggle_Led4(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
	/* Toggle led */
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80003fa:	2108      	movs	r1, #8
 80003fc:	481e      	ldr	r0, [pc, #120]	; (8000478 <Toggle_Led4+0x84>)
 80003fe:	f001 f819 	bl	8001434 <HAL_GPIO_TogglePin>
	/* Create String to display on terminal */
	uint8_t showTimeStamp[30] = {"Task4: "};
 8000402:	4a1e      	ldr	r2, [pc, #120]	; (800047c <Toggle_Led4+0x88>)
 8000404:	463b      	mov	r3, r7
 8000406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800040a:	e883 0003 	stmia.w	r3, {r0, r1}
 800040e:	f107 0308 	add.w	r3, r7, #8
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
 800041e:	829a      	strh	r2, [r3, #20]
	itoa(time_Stamp*10, var, 10);
 8000420:	4b17      	ldr	r3, [pc, #92]	; (8000480 <Toggle_Led4+0x8c>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	220a      	movs	r2, #10
 800042e:	4915      	ldr	r1, [pc, #84]	; (8000484 <Toggle_Led4+0x90>)
 8000430:	4618      	mov	r0, r3
 8000432:	f002 fd2b 	bl	8002e8c <itoa>
	strcat(showTimeStamp, var);
 8000436:	463b      	mov	r3, r7
 8000438:	4912      	ldr	r1, [pc, #72]	; (8000484 <Toggle_Led4+0x90>)
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fd30 	bl	8002ea0 <strcat>
	strcat(showTimeStamp, "ms\r\n");
 8000440:	463b      	mov	r3, r7
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fe82 	bl	800014c <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	461a      	mov	r2, r3
 800044c:	463b      	mov	r3, r7
 800044e:	4413      	add	r3, r2
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <Toggle_Led4+0x94>)
 8000452:	6810      	ldr	r0, [r2, #0]
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	7912      	ldrb	r2, [r2, #4]
 8000458:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, &showTimeStamp[0], strlen(showTimeStamp), 100);
 800045a:	463b      	mov	r3, r7
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fe75 	bl	800014c <strlen>
 8000462:	4603      	mov	r3, r0
 8000464:	b29a      	uxth	r2, r3
 8000466:	4639      	mov	r1, r7
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	4808      	ldr	r0, [pc, #32]	; (800048c <Toggle_Led4+0x98>)
 800046c:	f002 f847 	bl	80024fe <HAL_UART_Transmit>
}
 8000470:	bf00      	nop
 8000472:	3720      	adds	r7, #32
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010c00 	.word	0x40010c00
 800047c:	08002fc4 	.word	0x08002fc4
 8000480:	20000038 	.word	0x20000038
 8000484:	20000040 	.word	0x20000040
 8000488:	08002f5c 	.word	0x08002f5c
 800048c:	200000a8 	.word	0x200000a8

08000490 <One_Shot_Led>:
void One_Shot_Led(){
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
	/* Toggle led */
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 8000496:	2110      	movs	r1, #16
 8000498:	481f      	ldr	r0, [pc, #124]	; (8000518 <One_Shot_Led+0x88>)
 800049a:	f000 ffcb 	bl	8001434 <HAL_GPIO_TogglePin>
	/* Create String to display on terminal */
	uint8_t showTimeStamp[30] = {"One-Shot: "};
 800049e:	4a1f      	ldr	r2, [pc, #124]	; (800051c <One_Shot_Led+0x8c>)
 80004a0:	463b      	mov	r3, r7
 80004a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004a4:	c303      	stmia	r3!, {r0, r1}
 80004a6:	801a      	strh	r2, [r3, #0]
 80004a8:	3302      	adds	r3, #2
 80004aa:	0c12      	lsrs	r2, r2, #16
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	f107 030b 	add.w	r3, r7, #11
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
 80004bc:	f8c3 200f 	str.w	r2, [r3, #15]
	itoa(time_Stamp*10, var, 10);
 80004c0:	4b17      	ldr	r3, [pc, #92]	; (8000520 <One_Shot_Led+0x90>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4613      	mov	r3, r2
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	4413      	add	r3, r2
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	220a      	movs	r2, #10
 80004ce:	4915      	ldr	r1, [pc, #84]	; (8000524 <One_Shot_Led+0x94>)
 80004d0:	4618      	mov	r0, r3
 80004d2:	f002 fcdb 	bl	8002e8c <itoa>
	strcat(showTimeStamp, var);
 80004d6:	463b      	mov	r3, r7
 80004d8:	4912      	ldr	r1, [pc, #72]	; (8000524 <One_Shot_Led+0x94>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fce0 	bl	8002ea0 <strcat>
	strcat(showTimeStamp, "ms\r\n");
 80004e0:	463b      	mov	r3, r7
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff fe32 	bl	800014c <strlen>
 80004e8:	4603      	mov	r3, r0
 80004ea:	461a      	mov	r2, r3
 80004ec:	463b      	mov	r3, r7
 80004ee:	4413      	add	r3, r2
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <One_Shot_Led+0x98>)
 80004f2:	6810      	ldr	r0, [r2, #0]
 80004f4:	6018      	str	r0, [r3, #0]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	711a      	strb	r2, [r3, #4]
	HAL_UART_Transmit(&huart2, &showTimeStamp[0], strlen(showTimeStamp), 100);
 80004fa:	463b      	mov	r3, r7
 80004fc:	4618      	mov	r0, r3
 80004fe:	f7ff fe25 	bl	800014c <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	4639      	mov	r1, r7
 8000508:	2364      	movs	r3, #100	; 0x64
 800050a:	4808      	ldr	r0, [pc, #32]	; (800052c <One_Shot_Led+0x9c>)
 800050c:	f001 fff7 	bl	80024fe <HAL_UART_Transmit>
}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010c00 	.word	0x40010c00
 800051c:	08002fe4 	.word	0x08002fe4
 8000520:	20000038 	.word	0x20000038
 8000524:	20000040 	.word	0x20000040
 8000528:	08002f5c 	.word	0x08002f5c
 800052c:	200000a8 	.word	0x200000a8

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fbcc 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f83c 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8ec 	bl	8000718 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000540:	f000 f874 	bl	800062c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f8be 	bl	80006c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000548:	4814      	ldr	r0, [pc, #80]	; (800059c <main+0x6c>)
 800054a:	f001 fbf7 	bl	8001d3c <HAL_TIM_Base_Start_IT>
  SCH_Init();
 800054e:	f000 f93b 	bl	80007c8 <SCH_Init>
  LEDInit();
 8000552:	f7ff fe45 	bl	80001e0 <LEDInit>
  setTimer1(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f7ff fe00 	bl	800015c <setTimer1>
//  SCH_Add_Task(LED1, 0, 100); // Periodic task, executed regularly every 1 second after the delay of 1 second
//  SCH_Add_Task(LED2, 100, 200); // Periodic task, executed regularly every 2 seconds after the delay of 2 seconds
//  SCH_Add_Task(LED3, 300, 200); // Periodic task, executed regularly every 3 seconds after the delay of 3 seconds
//  SCH_Add_Task(LED4, 400, 100); // Periodic task, executed regularly every 4 seconds after the delay of 4 seconds
//  SCH_Add_Task(LED5, 500, 0); // One-shot task, executed once after the delay of 5 seconds
  SCH_Add_Task(Toggle_Led1, 0, 200);
 800055c:	22c8      	movs	r2, #200	; 0xc8
 800055e:	2100      	movs	r1, #0
 8000560:	480f      	ldr	r0, [pc, #60]	; (80005a0 <main+0x70>)
 8000562:	f000 f999 	bl	8000898 <SCH_Add_Task>
  SCH_Add_Task(Toggle_Led2, 200, 100);
 8000566:	2264      	movs	r2, #100	; 0x64
 8000568:	21c8      	movs	r1, #200	; 0xc8
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0x74>)
 800056c:	f000 f994 	bl	8000898 <SCH_Add_Task>
  SCH_Add_Task(Toggle_Led3, 300, 200);
 8000570:	22c8      	movs	r2, #200	; 0xc8
 8000572:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <main+0x78>)
 8000578:	f000 f98e 	bl	8000898 <SCH_Add_Task>
  SCH_Add_Task(Toggle_Led4, 400, 300);
 800057c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000580:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000584:	4809      	ldr	r0, [pc, #36]	; (80005ac <main+0x7c>)
 8000586:	f000 f987 	bl	8000898 <SCH_Add_Task>
  SCH_Add_Task(One_Shot_Led, 500, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <main+0x80>)
 8000592:	f000 f981 	bl	8000898 <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 8000596:	f000 f9cf 	bl	8000938 <SCH_Dispatch_Tasks>
 800059a:	e7fc      	b.n	8000596 <main+0x66>
 800059c:	20000060 	.word	0x20000060
 80005a0:	08000221 	.word	0x08000221
 80005a4:	080002bd 	.word	0x080002bd
 80005a8:	08000359 	.word	0x08000359
 80005ac:	080003f5 	.word	0x080003f5
 80005b0:	08000491 	.word	0x08000491

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0318 	add.w	r3, r7, #24
 80005be:	2228      	movs	r2, #40	; 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fc64 	bl	8002e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005de:	2310      	movs	r3, #16
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 ff3c 	bl	8001468 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005f6:	f000 f8e1 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 f9a8 	bl	8001968 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800061e:	f000 f8cd 	bl	80007bc <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3740      	adds	r7, #64	; 0x40
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM2_Init+0x94>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000652:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_TIM2_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000660:	2209      	movs	r2, #9
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM2_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_TIM2_Init+0x94>)
 8000672:	f001 fb13 	bl	8001c9c <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800067c:	f000 f89e 	bl	80007bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_TIM2_Init+0x94>)
 800068e:	f001 fca9 	bl	8001fe4 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f890 	bl	80007bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_TIM2_Init+0x94>)
 80006aa:	f001 fe71 	bl	8002390 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f882 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000060 	.word	0x20000060

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f001 feb2 	bl	8002464 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f859 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000a8 	.word	0x200000a8
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_GPIO_Init+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	4a16      	ldr	r2, [pc, #88]	; (800078c <MX_GPIO_Init+0x74>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	6193      	str	r3, [r2, #24]
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0x74>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_GPIO_Init+0x74>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <MX_GPIO_Init+0x74>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_GPIO_Init+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0308 	and.w	r3, r3, #8
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 800075c:	2200      	movs	r2, #0
 800075e:	211f      	movs	r1, #31
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <MX_GPIO_Init+0x78>)
 8000762:	f000 fe4f 	bl	8001404 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000766:	231f      	movs	r3, #31
 8000768:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	4619      	mov	r1, r3
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_GPIO_Init+0x78>)
 800077e:	f000 fcc7 	bl	8001110 <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	40010c00 	.word	0x40010c00

08000794 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  SCH_Update();
 800079c:	f000 f820 	bl	80007e0 <SCH_Update>
  time_Stamp++;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80007a8:	6013      	str	r3, [r2, #0]
  timerRun();
 80007aa:	f7ff fceb 	bl	8000184 <timerRun>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20000038 	.word	0x20000038

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <SCH_Init>:
#define SCH_MAX_TASKS 40

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint32_t current_index_task = 0;

void SCH_Init(void) {
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  current_index_task = 0;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <SCH_Init+0x14>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000003c 	.word	0x2000003c

080007e0 <SCH_Update>:

void SCH_Update(void) {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  for(int i = 0; i < current_index_task; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	e046      	b.n	800087a <SCH_Update+0x9a>
    if(SCH_tasks_G[i].Delay > 0) {
 80007ec:	4928      	ldr	r1, [pc, #160]	; (8000890 <SCH_Update+0xb0>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4613      	mov	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	4413      	add	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	440b      	add	r3, r1
 80007fa:	3304      	adds	r3, #4
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d013      	beq.n	800082a <SCH_Update+0x4a>
      SCH_tasks_G[i].Delay--;
 8000802:	4923      	ldr	r1, [pc, #140]	; (8000890 <SCH_Update+0xb0>)
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	4413      	add	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	440b      	add	r3, r1
 8000810:	3304      	adds	r3, #4
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	1e59      	subs	r1, r3, #1
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <SCH_Update+0xb0>)
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4403      	add	r3, r0
 8000824:	3304      	adds	r3, #4
 8000826:	6019      	str	r1, [r3, #0]
 8000828:	e024      	b.n	8000874 <SCH_Update+0x94>
    }
    else {
      SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 800082a:	4919      	ldr	r1, [pc, #100]	; (8000890 <SCH_Update+0xb0>)
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	3308      	adds	r3, #8
 800083a:	6819      	ldr	r1, [r3, #0]
 800083c:	4814      	ldr	r0, [pc, #80]	; (8000890 <SCH_Update+0xb0>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	4403      	add	r3, r0
 800084a:	3304      	adds	r3, #4
 800084c:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe++;
 800084e:	4910      	ldr	r1, [pc, #64]	; (8000890 <SCH_Update+0xb0>)
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4613      	mov	r3, r2
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	440b      	add	r3, r1
 800085c:	330c      	adds	r3, #12
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <SCH_Update+0xb0>)
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	4403      	add	r3, r0
 8000870:	330c      	adds	r3, #12
 8000872:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < current_index_task; i++) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3301      	adds	r3, #1
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SCH_Update+0xb4>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	d3b3      	bcc.n	80007ec <SCH_Update+0xc>
    }
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	200000ec 	.word	0x200000ec
 8000894:	2000003c 	.word	0x2000003c

08000898 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period) {
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  if(current_index_task < SCH_MAX_TASKS) {
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <SCH_Add_Task+0x98>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b27      	cmp	r3, #39	; 0x27
 80008aa:	d83b      	bhi.n	8000924 <SCH_Add_Task+0x8c>
    SCH_tasks_G[current_index_task].pTask = pFunction;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SCH_Add_Task+0x98>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4920      	ldr	r1, [pc, #128]	; (8000934 <SCH_Add_Task+0x9c>)
 80008b2:	4613      	mov	r3, r2
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	4413      	add	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	440b      	add	r3, r1
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Delay = Delay;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <SCH_Add_Task+0x98>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	491b      	ldr	r1, [pc, #108]	; (8000934 <SCH_Add_Task+0x9c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	3304      	adds	r3, #4
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Period = Period;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <SCH_Add_Task+0x98>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <SCH_Add_Task+0x9c>)
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	3308      	adds	r3, #8
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].RunMe = 0;
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <SCH_Add_Task+0x98>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4910      	ldr	r1, [pc, #64]	; (8000934 <SCH_Add_Task+0x9c>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	440b      	add	r3, r1
 80008fc:	330c      	adds	r3, #12
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].TaskID = current_index_task;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <SCH_Add_Task+0x98>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <SCH_Add_Task+0x98>)
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <SCH_Add_Task+0x9c>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4403      	add	r3, r0
 8000916:	3310      	adds	r3, #16
 8000918:	6019      	str	r1, [r3, #0]

    current_index_task++;
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SCH_Add_Task+0x98>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	3301      	adds	r3, #1
 8000920:	4a03      	ldr	r2, [pc, #12]	; (8000930 <SCH_Add_Task+0x98>)
 8000922:	6013      	str	r3, [r2, #0]
  }
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	2000003c 	.word	0x2000003c
 8000934:	200000ec 	.word	0x200000ec

08000938 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  for(int i = 0; i < current_index_task; i++) {
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e038      	b.n	80009b6 <SCH_Dispatch_Tasks+0x7e>
    if(SCH_tasks_G[i].RunMe > 0) {
 8000944:	4921      	ldr	r1, [pc, #132]	; (80009cc <SCH_Dispatch_Tasks+0x94>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	330c      	adds	r3, #12
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d02a      	beq.n	80009b0 <SCH_Dispatch_Tasks+0x78>
      (*SCH_tasks_G[i].pTask)();
 800095a:	491c      	ldr	r1, [pc, #112]	; (80009cc <SCH_Dispatch_Tasks+0x94>)
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	440b      	add	r3, r1
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4798      	blx	r3
      SCH_tasks_G[i].RunMe--;
 800096c:	4917      	ldr	r1, [pc, #92]	; (80009cc <SCH_Dispatch_Tasks+0x94>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	4613      	mov	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	4413      	add	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	330c      	adds	r3, #12
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	1e59      	subs	r1, r3, #1
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <SCH_Dispatch_Tasks+0x94>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4403      	add	r3, r0
 800098e:	330c      	adds	r3, #12
 8000990:	6019      	str	r1, [r3, #0]
      if(SCH_tasks_G[i].Period == 0){
 8000992:	490e      	ldr	r1, [pc, #56]	; (80009cc <SCH_Dispatch_Tasks+0x94>)
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3308      	adds	r3, #8
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d103      	bne.n	80009b0 <SCH_Dispatch_Tasks+0x78>
    	  SCH_Delete_Task(i);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f812 	bl	80009d4 <SCH_Delete_Task>
  for(int i = 0; i < current_index_task; i++) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SCH_Dispatch_Tasks+0x98>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d3c1      	bcc.n	8000944 <SCH_Dispatch_Tasks+0xc>
      }
    }
  }
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000ec 	.word	0x200000ec
 80009d0:	2000003c 	.word	0x2000003c

080009d4 <SCH_Delete_Task>:

void SCH_Delete_Task(uint32_t TASK_INDEX)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	if (TASK_INDEX >= current_index_task ){ //
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <SCH_Delete_Task+0xd4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d25b      	bcs.n	8000a9e <SCH_Delete_Task+0xca>

			return;
		}else {
			for (int i = TASK_INDEX; i < current_index_task - 1; i++){
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e04c      	b.n	8000a86 <SCH_Delete_Task+0xb2>
				SCH_tasks_G[i].pTask  = SCH_tasks_G[i+1].pTask;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	492e      	ldr	r1, [pc, #184]	; (8000aac <SCH_Delete_Task+0xd8>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	6819      	ldr	r1, [r3, #0]
 80009fe:	482b      	ldr	r0, [pc, #172]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4613      	mov	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	4413      	add	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4403      	add	r3, r0
 8000a0c:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Period = SCH_tasks_G[i+1].Period;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	4926      	ldr	r1, [pc, #152]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3308      	adds	r3, #8
 8000a20:	6819      	ldr	r1, [r3, #0]
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4403      	add	r3, r0
 8000a30:	3308      	adds	r3, #8
 8000a32:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].RunMe  = SCH_tasks_G[i+1].RunMe;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	491c      	ldr	r1, [pc, #112]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	330c      	adds	r3, #12
 8000a46:	6819      	ldr	r1, [r3, #0]
 8000a48:	4818      	ldr	r0, [pc, #96]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	4413      	add	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4403      	add	r3, r0
 8000a56:	330c      	adds	r3, #12
 8000a58:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[i].Delay  = SCH_tasks_G[i+1].Delay;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	4913      	ldr	r1, [pc, #76]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <SCH_Delete_Task+0xd8>)
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4403      	add	r3, r0
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	6019      	str	r1, [r3, #0]
			for (int i = TASK_INDEX; i < current_index_task - 1; i++){
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SCH_Delete_Task+0xd4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	1e5a      	subs	r2, r3, #1
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d8ac      	bhi.n	80009ec <SCH_Delete_Task+0x18>
			}
			current_index_task--;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SCH_Delete_Task+0xd4>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <SCH_Delete_Task+0xd4>)
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	e000      	b.n	8000aa0 <SCH_Delete_Task+0xcc>
			return;
 8000a9e:	bf00      	nop
		}
}
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	2000003c 	.word	0x2000003c
 8000aac:	200000ec 	.word	0x200000ec

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_MspInit+0x5c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6193      	str	r3, [r2, #24]
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x5c>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x5c>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_MspInit+0x60>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_MspInit+0x60>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000

08000b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d113      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_TIM_Base_MspInit+0x44>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_TIM_Base_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_TIM_Base_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201c      	movs	r0, #28
 8000b44:	f000 f9fd 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b48:	201c      	movs	r0, #28
 8000b4a:	f000 fa16 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_UART_MspInit+0x98>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d137      	bne.n	8000bec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	61d3      	str	r3, [r2, #28]
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	6193      	str	r3, [r2, #24]
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0x9c>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bac:	2304      	movs	r3, #4
 8000bae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480f      	ldr	r0, [pc, #60]	; (8000bfc <HAL_UART_MspInit+0xa0>)
 8000bc0:	f000 faa6 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_UART_MspInit+0xa0>)
 8000bd8:	f000 fa9a 	bl	8001110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2026      	movs	r0, #38	; 0x26
 8000be2:	f000 f9ae 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be6:	2026      	movs	r0, #38	; 0x26
 8000be8:	f000 f9c7 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40004400 	.word	0x40004400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010800 	.word	0x40010800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c46:	f000 f889 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <TIM2_IRQHandler+0x10>)
 8000c56:	f001 f8bd 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000060 	.word	0x20000060

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f001 fcdb 	bl	8002624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000a8 	.word	0x200000a8

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	; (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	; (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000caa:	f7ff ffe5 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cae:	f002 f8b1 	bl	8002e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fc3d 	bl	8000530 <main>
  bx lr
 8000cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc0:	0800305c 	.word	0x0800305c
  ldr r2, =_sbss
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cc8:	20000410 	.word	0x20000410

08000ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f923 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fee0 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f93b 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f903 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000040c 	.word	0x2000040c

08000d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	2000040c 	.word	0x2000040c

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <__NVIC_EnableIRQ+0x34>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff2d 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff42 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff35 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d008      	beq.n	8000fd6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e020      	b.n	8001018 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 020e 	bic.w	r2, r2, #14
 8000fe4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ffe:	2101      	movs	r1, #1
 8001000:	fa01 f202 	lsl.w	r2, r1, r2
 8001004:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
	...

08001024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001036:	2b02      	cmp	r3, #2
 8001038:	d005      	beq.n	8001046 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2204      	movs	r2, #4
 800103e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e051      	b.n	80010ea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 020e 	bic.w	r2, r2, #14
 8001054:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0201 	bic.w	r2, r2, #1
 8001064:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	; (80010f4 <HAL_DMA_Abort_IT+0xd0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d029      	beq.n	80010c4 <HAL_DMA_Abort_IT+0xa0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <HAL_DMA_Abort_IT+0xd4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d022      	beq.n	80010c0 <HAL_DMA_Abort_IT+0x9c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_DMA_Abort_IT+0xd8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d01a      	beq.n	80010ba <HAL_DMA_Abort_IT+0x96>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_DMA_Abort_IT+0xdc>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d012      	beq.n	80010b4 <HAL_DMA_Abort_IT+0x90>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_DMA_Abort_IT+0xe0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00a      	beq.n	80010ae <HAL_DMA_Abort_IT+0x8a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_DMA_Abort_IT+0xe4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d102      	bne.n	80010a8 <HAL_DMA_Abort_IT+0x84>
 80010a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010a6:	e00e      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ac:	e00b      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b2:	e008      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	e005      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010be:	e002      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010c0:	2310      	movs	r3, #16
 80010c2:	e000      	b.n	80010c6 <HAL_DMA_Abort_IT+0xa2>
 80010c4:	2301      	movs	r3, #1
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_DMA_Abort_IT+0xe8>)
 80010c8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4798      	blx	r3
    } 
  }
  return status;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40020008 	.word	0x40020008
 80010f8:	4002001c 	.word	0x4002001c
 80010fc:	40020030 	.word	0x40020030
 8001100:	40020044 	.word	0x40020044
 8001104:	40020058 	.word	0x40020058
 8001108:	4002006c 	.word	0x4002006c
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e148      	b.n	80013b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001124:	2201      	movs	r2, #1
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8137 	bne.w	80013b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4aa3      	ldr	r2, [pc, #652]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d05e      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800114c:	4aa1      	ldr	r2, [pc, #644]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d875      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001152:	4aa1      	ldr	r2, [pc, #644]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d058      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001158:	4a9f      	ldr	r2, [pc, #636]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d86f      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800115e:	4a9f      	ldr	r2, [pc, #636]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d052      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001164:	4a9d      	ldr	r2, [pc, #628]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d869      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800116a:	4a9d      	ldr	r2, [pc, #628]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d04c      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001170:	4a9b      	ldr	r2, [pc, #620]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d863      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001176:	4a9b      	ldr	r2, [pc, #620]	; (80013e4 <HAL_GPIO_Init+0x2d4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d046      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800117c:	4a99      	ldr	r2, [pc, #612]	; (80013e4 <HAL_GPIO_Init+0x2d4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d85d      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d82a      	bhi.n	80011dc <HAL_GPIO_Init+0xcc>
 8001186:	2b12      	cmp	r3, #18
 8001188:	d859      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <HAL_GPIO_Init+0x80>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	0800120b 	.word	0x0800120b
 8001194:	080011e5 	.word	0x080011e5
 8001198:	080011f7 	.word	0x080011f7
 800119c:	08001239 	.word	0x08001239
 80011a0:	0800123f 	.word	0x0800123f
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800123f 	.word	0x0800123f
 80011ac:	0800123f 	.word	0x0800123f
 80011b0:	0800123f 	.word	0x0800123f
 80011b4:	0800123f 	.word	0x0800123f
 80011b8:	0800123f 	.word	0x0800123f
 80011bc:	0800123f 	.word	0x0800123f
 80011c0:	0800123f 	.word	0x0800123f
 80011c4:	0800123f 	.word	0x0800123f
 80011c8:	0800123f 	.word	0x0800123f
 80011cc:	0800123f 	.word	0x0800123f
 80011d0:	0800123f 	.word	0x0800123f
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	08001201 	.word	0x08001201
 80011dc:	4a82      	ldr	r2, [pc, #520]	; (80013e8 <HAL_GPIO_Init+0x2d8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011e2:	e02c      	b.n	800123e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e029      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	3304      	adds	r3, #4
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e024      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	3308      	adds	r3, #8
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e01f      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	330c      	adds	r3, #12
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e01a      	b.n	8001240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001212:	2304      	movs	r3, #4
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e013      	b.n	8001240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	611a      	str	r2, [r3, #16]
          break;
 800122a:	e009      	b.n	8001240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800122c:	2308      	movs	r3, #8
 800122e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	615a      	str	r2, [r3, #20]
          break;
 8001236:	e003      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x130>
          break;
 800123e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d801      	bhi.n	800124a <HAL_GPIO_Init+0x13a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e001      	b.n	800124e <HAL_GPIO_Init+0x13e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d802      	bhi.n	800125c <HAL_GPIO_Init+0x14c>
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x152>
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	3b08      	subs	r3, #8
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	210f      	movs	r1, #15
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	6a39      	ldr	r1, [r7, #32]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	431a      	orrs	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8090 	beq.w	80013b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001290:	4b56      	ldr	r3, [pc, #344]	; (80013ec <HAL_GPIO_Init+0x2dc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a55      	ldr	r2, [pc, #340]	; (80013ec <HAL_GPIO_Init+0x2dc>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_GPIO_Init+0x2dc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a8:	4a51      	ldr	r2, [pc, #324]	; (80013f0 <HAL_GPIO_Init+0x2e0>)
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2e4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_GPIO_Init+0x1e0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2e8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d007      	beq.n	80012ec <HAL_GPIO_Init+0x1dc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2ec>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1e2>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1e2>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1e2>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001302:	493b      	ldr	r1, [pc, #236]	; (80013f0 <HAL_GPIO_Init+0x2e0>)
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800132a:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	43db      	mvns	r3, r3
 8001332:	4933      	ldr	r1, [pc, #204]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001334:	4013      	ands	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	492d      	ldr	r1, [pc, #180]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4929      	ldr	r1, [pc, #164]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800135c:	4013      	ands	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800136c:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	4923      	ldr	r1, [pc, #140]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	608b      	str	r3, [r1, #8]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800137a:	4b21      	ldr	r3, [pc, #132]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	491f      	ldr	r1, [pc, #124]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001384:	4013      	ands	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	4919      	ldr	r1, [pc, #100]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	60cb      	str	r3, [r1, #12]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4915      	ldr	r1, [pc, #84]	; (8001400 <HAL_GPIO_Init+0x2f0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3301      	adds	r3, #1
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	fa22 f303 	lsr.w	r3, r2, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f47f aeaf 	bne.w	8001124 <HAL_GPIO_Init+0x14>
  }
}
 80013c6:	bf00      	nop
 80013c8:	bf00      	nop
 80013ca:	372c      	adds	r7, #44	; 0x2c
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	10320000 	.word	0x10320000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10220000 	.word	0x10220000
 80013e0:	10210000 	.word	0x10210000
 80013e4:	10120000 	.word	0x10120000
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010800 	.word	0x40010800
 80013f8:	40010c00 	.word	0x40010c00
 80013fc:	40011000 	.word	0x40011000
 8001400:	40010400 	.word	0x40010400

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001420:	e003      	b.n	800142a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	041a      	lsls	r2, r3, #16
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43d9      	mvns	r1, r3
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	400b      	ands	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e26c      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8087 	beq.w	8001596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001488:	4b92      	ldr	r3, [pc, #584]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b04      	cmp	r3, #4
 8001492:	d00c      	beq.n	80014ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001494:	4b8f      	ldr	r3, [pc, #572]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	2b08      	cmp	r3, #8
 800149e:	d112      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
 80014a0:	4b8c      	ldr	r3, [pc, #560]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ac:	d10b      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06c      	beq.n	8001594 <HAL_RCC_OscConfig+0x12c>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d168      	bne.n	8001594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e246      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x76>
 80014d0:	4b80      	ldr	r3, [pc, #512]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a7f      	ldr	r2, [pc, #508]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e02e      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x98>
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b78      	ldr	r3, [pc, #480]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a77      	ldr	r2, [pc, #476]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e01d      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001508:	d10c      	bne.n	8001524 <HAL_RCC_OscConfig+0xbc>
 800150a:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a71      	ldr	r2, [pc, #452]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	4b6f      	ldr	r3, [pc, #444]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6e      	ldr	r2, [pc, #440]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800151c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e00b      	b.n	800153c <HAL_RCC_OscConfig+0xd4>
 8001524:	4b6b      	ldr	r3, [pc, #428]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a6a      	ldr	r2, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a67      	ldr	r2, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fc1c 	bl	8000d80 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc18 	bl	8000d80 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1fa      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0xe4>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fc08 	bl	8000d80 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc04 	bl	8000d80 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e1e6      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x10c>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d063      	beq.n	800166a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00b      	beq.n	80015c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d11c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
 80015ba:	4b46      	ldr	r3, [pc, #280]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d116      	bne.n	80015f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e1ba      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4939      	ldr	r1, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	e03a      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 80015fe:	2201      	movs	r2, #1
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fbbd 	bl	8000d80 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fbb9 	bl	8000d80 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e19b      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001628:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4927      	ldr	r1, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e015      	b.n	800166a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_RCC_OscConfig+0x270>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb9c 	bl	8000d80 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fb98 	bl	8000d80 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e17a      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03a      	beq.n	80016ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fb7c 	bl	8000d80 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fb78 	bl	8000d80 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e15a      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 fad8 	bl	8001c60 <RCC_Delay>
 80016b0:	e01c      	b.n	80016ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_RCC_OscConfig+0x274>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fb62 	bl	8000d80 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fb5e 	bl	8000d80 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d908      	bls.n	80016e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e140      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	42420000 	.word	0x42420000
 80016dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	4b9e      	ldr	r3, [pc, #632]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1e9      	bne.n	80016c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a6 	beq.w	8001846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10d      	bne.n	8001726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a93      	ldr	r2, [pc, #588]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b91      	ldr	r3, [pc, #580]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001722:	2301      	movs	r3, #1
 8001724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	4b8e      	ldr	r3, [pc, #568]	; (8001960 <HAL_RCC_OscConfig+0x4f8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	2b00      	cmp	r3, #0
 8001730:	d118      	bne.n	8001764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001732:	4b8b      	ldr	r3, [pc, #556]	; (8001960 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a8a      	ldr	r2, [pc, #552]	; (8001960 <HAL_RCC_OscConfig+0x4f8>)
 8001738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb1f 	bl	8000d80 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001746:	f7ff fb1b 	bl	8000d80 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0fd      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001758:	4b81      	ldr	r3, [pc, #516]	; (8001960 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d106      	bne.n	800177a <HAL_RCC_OscConfig+0x312>
 800176c:	4b7b      	ldr	r3, [pc, #492]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a7a      	ldr	r2, [pc, #488]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e02d      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10c      	bne.n	800179c <HAL_RCC_OscConfig+0x334>
 8001782:	4b76      	ldr	r3, [pc, #472]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4a75      	ldr	r2, [pc, #468]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6213      	str	r3, [r2, #32]
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	6213      	str	r3, [r2, #32]
 800179a:	e01c      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b05      	cmp	r3, #5
 80017a2:	d10c      	bne.n	80017be <HAL_RCC_OscConfig+0x356>
 80017a4:	4b6d      	ldr	r3, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4a6c      	ldr	r2, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6213      	str	r3, [r2, #32]
 80017b0:	4b6a      	ldr	r3, [pc, #424]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a69      	ldr	r2, [pc, #420]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e00b      	b.n	80017d6 <HAL_RCC_OscConfig+0x36e>
 80017be:	4b67      	ldr	r3, [pc, #412]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a66      	ldr	r2, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	f023 0301 	bic.w	r3, r3, #1
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	6a1b      	ldr	r3, [r3, #32]
 80017ce:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff facf 	bl	8000d80 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff facb 	bl	8000d80 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e0ab      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fc:	4b57      	ldr	r3, [pc, #348]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ee      	beq.n	80017e6 <HAL_RCC_OscConfig+0x37e>
 8001808:	e014      	b.n	8001834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7ff fab9 	bl	8000d80 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fab5 	bl	8000d80 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e095      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001828:	4b4c      	ldr	r3, [pc, #304]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ee      	bne.n	8001812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	4b48      	ldr	r3, [pc, #288]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	4a47      	ldr	r2, [pc, #284]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8081 	beq.w	8001952 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001850:	4b42      	ldr	r3, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d061      	beq.n	8001920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d146      	bne.n	80018f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b3f      	ldr	r3, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x4fc>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fa89 	bl	8000d80 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff fa85 	bl	8000d80 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e067      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d108      	bne.n	80018ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	492d      	ldr	r1, [pc, #180]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a19      	ldr	r1, [r3, #32]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	430b      	orrs	r3, r1
 80018be:	4927      	ldr	r1, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x4fc>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa59 	bl	8000d80 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fa55 	bl	8000d80 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e037      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46a>
 80018f0:	e02f      	b.n	8001952 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_RCC_OscConfig+0x4fc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fa42 	bl	8000d80 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fa3e 	bl	8000d80 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e020      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x498>
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e013      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x4f4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	429a      	cmp	r2, r3
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	40007000 	.word	0x40007000
 8001964:	42420060 	.word	0x42420060

08001968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0d0      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d910      	bls.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b67      	ldr	r3, [pc, #412]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4965      	ldr	r1, [pc, #404]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d040      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e073      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06b      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4936      	ldr	r1, [pc, #216]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f992 	bl	8000d80 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7ff f98e 	bl	8000d80 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e053      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d210      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4922      	ldr	r1, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1cc>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f8f0 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08003014 	.word	0x08003014
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	b490      	push	{r4, r7}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b44:	1d3c      	adds	r4, r7, #4
 8001b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b4c:	f240 2301 	movw	r3, #513	; 0x201
 8001b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b66:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x46>
 8001b7a:	e02d      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7e:	623b      	str	r3, [r7, #32]
      break;
 8001b80:	e02d      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b8e:	4413      	add	r3, r2
 8001b90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d013      	beq.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba0:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0c5b      	lsrs	r3, r3, #17
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bae:	4413      	add	r3, r2
 8001bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bba:	fb02 f203 	mul.w	r2, r2, r3
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc6:	e004      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	623b      	str	r3, [r7, #32]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bda:	623b      	str	r3, [r7, #32]
      break;
 8001bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bde:	6a3b      	ldr	r3, [r7, #32]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc90      	pop	{r4, r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	08003004 	.word	0x08003004
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	007a1200 	.word	0x007a1200
 8001bf8:	003d0900 	.word	0x003d0900

08001bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c00:	4b02      	ldr	r3, [pc, #8]	; (8001c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000000 	.word	0x20000000

08001c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c14:	f7ff fff2 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	4903      	ldr	r1, [pc, #12]	; (8001c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08003024 	.word	0x08003024

08001c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c3c:	f7ff ffde 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	0adb      	lsrs	r3, r3, #11
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08003024 	.word	0x08003024

08001c60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <RCC_Delay+0x34>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <RCC_Delay+0x38>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a5b      	lsrs	r3, r3, #9
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c7c:	bf00      	nop
  }
  while (Delay --);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1e5a      	subs	r2, r3, #1
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f9      	bne.n	8001c7c <RCC_Delay+0x1c>
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000000 	.word	0x20000000
 8001c98:	10624dd3 	.word	0x10624dd3

08001c9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e041      	b.n	8001d32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe ff26 	bl	8000b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f000 fa6a 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e035      	b.n	8001dc0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <HAL_TIM_Base_Start_IT+0x90>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d009      	beq.n	8001d8a <HAL_TIM_Base_Start_IT+0x4e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7e:	d004      	beq.n	8001d8a <HAL_TIM_Base_Start_IT+0x4e>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_TIM_Base_Start_IT+0x94>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d111      	bne.n	8001dae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b06      	cmp	r3, #6
 8001d9a:	d010      	beq.n	8001dbe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dac:	e007      	b.n	8001dbe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40012c00 	.word	0x40012c00
 8001dd0:	40000400 	.word	0x40000400

08001dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0202 	mvn.w	r2, #2
 8001e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f9b1 	bl	800217e <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f9a4 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f9b3 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0204 	mvn.w	r2, #4
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f987 	bl	800217e <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f97a 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f989 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0208 	mvn.w	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f95d 	bl	800217e <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f950 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f95f 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0210 	mvn.w	r2, #16
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2208      	movs	r2, #8
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f933 	bl	800217e <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f926 	bl	800216c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f935 	bl	8002190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0201 	mvn.w	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fc1e 	bl	8000794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fa67 	bl	8002452 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d107      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8f9 	bl	80021a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0220 	mvn.w	r2, #32
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa32 	bl	8002440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x18>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0b3      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x180>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800201a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002022:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002034:	d03e      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0xd0>
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203a:	f200 8087 	bhi.w	800214c <HAL_TIM_ConfigClockSource+0x168>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002042:	f000 8085 	beq.w	8002150 <HAL_TIM_ConfigClockSource+0x16c>
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204a:	d87f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 800204c:	2b70      	cmp	r3, #112	; 0x70
 800204e:	d01a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xa2>
 8002050:	2b70      	cmp	r3, #112	; 0x70
 8002052:	d87b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 8002054:	2b60      	cmp	r3, #96	; 0x60
 8002056:	d050      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x116>
 8002058:	2b60      	cmp	r3, #96	; 0x60
 800205a:	d877      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 800205c:	2b50      	cmp	r3, #80	; 0x50
 800205e:	d03c      	beq.n	80020da <HAL_TIM_ConfigClockSource+0xf6>
 8002060:	2b50      	cmp	r3, #80	; 0x50
 8002062:	d873      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d058      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x136>
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d86f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 800206c:	2b30      	cmp	r3, #48	; 0x30
 800206e:	d064      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x156>
 8002070:	2b30      	cmp	r3, #48	; 0x30
 8002072:	d86b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d060      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x156>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d867      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x168>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x156>
 8002080:	2b10      	cmp	r3, #16
 8002082:	d05a      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002084:	e062      	b.n	800214c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f000 f95c 	bl	8002352 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
      break;
 80020b2:	e04e      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f000 f945 	bl	8002352 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d6:	609a      	str	r2, [r3, #8]
      break;
 80020d8:	e03b      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 f8bc 	bl	8002264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2150      	movs	r1, #80	; 0x50
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f913 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 80020f8:	e02b      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	461a      	mov	r2, r3
 8002108:	f000 f8da 	bl	80022c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2160      	movs	r1, #96	; 0x60
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f903 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 8002118:	e01b      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f89c 	bl	8002264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	; 0x40
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f8f3 	bl	800231e <TIM_ITRx_SetConfig>
      break;
 8002138:	e00b      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 f8ea 	bl	800231e <TIM_ITRx_SetConfig>
        break;
 800214a:	e002      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002150:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a25      	ldr	r2, [pc, #148]	; (800225c <TIM_Base_SetConfig+0xa8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <TIM_Base_SetConfig+0x28>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d003      	beq.n	80021dc <TIM_Base_SetConfig+0x28>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a22      	ldr	r2, [pc, #136]	; (8002260 <TIM_Base_SetConfig+0xac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d108      	bne.n	80021ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1a      	ldr	r2, [pc, #104]	; (800225c <TIM_Base_SetConfig+0xa8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0x52>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0x52>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <TIM_Base_SetConfig+0xac>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a07      	ldr	r2, [pc, #28]	; (800225c <TIM_Base_SetConfig+0xa8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d103      	bne.n	800224c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	615a      	str	r2, [r3, #20]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40000400 	.word	0x40000400

08002264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0201 	bic.w	r2, r3, #1
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	011b      	lsls	r3, r3, #4
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f023 030a 	bic.w	r3, r3, #10
 80022a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f023 0210 	bic.w	r2, r3, #16
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	031b      	lsls	r3, r3, #12
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	621a      	str	r2, [r3, #32]
}
 8002314:	bf00      	nop
 8002316:	371c      	adds	r7, #28
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	f043 0307 	orr.w	r3, r3, #7
 8002340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	609a      	str	r2, [r3, #8]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002352:	b480      	push	{r7}
 8002354:	b087      	sub	sp, #28
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800236c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	431a      	orrs	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4313      	orrs	r3, r2
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	609a      	str	r2, [r3, #8]
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e041      	b.n	800242c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f4:	d004      	beq.n	8002400 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10c      	bne.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4313      	orrs	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00
 800243c:	40000400 	.word	0x40000400

08002440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e03f      	b.n	80024f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7fe fb66 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fc25 	bl	8002cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b08a      	sub	sp, #40	; 0x28
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d17c      	bne.n	8002618 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_UART_Transmit+0x2c>
 8002524:	88fb      	ldrh	r3, [r7, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e075      	b.n	800261a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_UART_Transmit+0x3e>
 8002538:	2302      	movs	r3, #2
 800253a:	e06e      	b.n	800261a <HAL_UART_Transmit+0x11c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2221      	movs	r2, #33	; 0x21
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002552:	f7fe fc15 	bl	8000d80 <HAL_GetTick>
 8002556:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	88fa      	ldrh	r2, [r7, #6]
 800255c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	88fa      	ldrh	r2, [r7, #6]
 8002562:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800256c:	d108      	bne.n	8002580 <HAL_UART_Transmit+0x82>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d104      	bne.n	8002580 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	e003      	b.n	8002588 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002590:	e02a      	b.n	80025e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 fa11 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e036      	b.n	800261a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10b      	bne.n	80025ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	461a      	mov	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3302      	adds	r3, #2
 80025c6:	61bb      	str	r3, [r7, #24]
 80025c8:	e007      	b.n	80025da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1cf      	bne.n	8002592 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2140      	movs	r1, #64	; 0x40
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f9e1 	bl	80029c4 <UART_WaitOnFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e006      	b.n	800261a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10d      	bne.n	8002676 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_UART_IRQHandler+0x52>
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fa99 	bl	8002ba6 <UART_Receive_IT>
      return;
 8002674:	e17b      	b.n	800296e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80b1 	beq.w	80027e0 <HAL_UART_IRQHandler+0x1bc>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_UART_IRQHandler+0x70>
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 80a6 	beq.w	80027e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_UART_IRQHandler+0x90>
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d005      	beq.n	80026b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f043 0201 	orr.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_UART_IRQHandler+0xb0>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_UART_IRQHandler+0xd0>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00f      	beq.n	800271e <HAL_UART_IRQHandler+0xfa>
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_UART_IRQHandler+0xee>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0208 	orr.w	r2, r3, #8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 811e 	beq.w	8002964 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_UART_IRQHandler+0x11e>
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fa32 	bl	8002ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf14      	ite	ne
 8002750:	2301      	movne	r3, #1
 8002752:	2300      	moveq	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d102      	bne.n	800276a <HAL_UART_IRQHandler+0x146>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d031      	beq.n	80027ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f974 	bl	8002a58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800278c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	2b00      	cmp	r3, #0
 8002794:	d013      	beq.n	80027be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4a76      	ldr	r2, [pc, #472]	; (8002974 <HAL_UART_IRQHandler+0x350>)
 800279c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fc3e 	bl	8001024 <HAL_DMA_Abort_IT>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d016      	beq.n	80027dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b8:	4610      	mov	r0, r2
 80027ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	e00e      	b.n	80027dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8ec 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	e00a      	b.n	80027dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8e8 	bl	800299c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027cc:	e006      	b.n	80027dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8e4 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027da:	e0c3      	b.n	8002964 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027dc:	bf00      	nop
    return;
 80027de:	e0c1      	b.n	8002964 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	f040 80a1 	bne.w	800292c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 809b 	beq.w	800292c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 8095 	beq.w	800292c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04e      	beq.n	80028c4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002830:	8a3b      	ldrh	r3, [r7, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8098 	beq.w	8002968 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800283c:	8a3a      	ldrh	r2, [r7, #16]
 800283e:	429a      	cmp	r2, r3
 8002840:	f080 8092 	bcs.w	8002968 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	8a3a      	ldrh	r2, [r7, #16]
 8002848:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b20      	cmp	r3, #32
 8002852:	d02b      	beq.n	80028ac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002862:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002882:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0210 	bic.w	r2, r2, #16
 80028a0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fb81 	bl	8000fae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f876 	bl	80029ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80028c2:	e051      	b.n	8002968 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d047      	beq.n	800296c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80028dc:	8a7b      	ldrh	r3, [r7, #18]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d044      	beq.n	800296c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80028f0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0201 	bic.w	r2, r2, #1
 8002900:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0210 	bic.w	r2, r2, #16
 800291e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002920:	8a7b      	ldrh	r3, [r7, #18]
 8002922:	4619      	mov	r1, r3
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f842 	bl	80029ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800292a:	e01f      	b.n	800296c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_UART_IRQHandler+0x324>
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8c9 	bl	8002ad8 <UART_Transmit_IT>
    return;
 8002946:	e012      	b.n	800296e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_UART_IRQHandler+0x34a>
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f90a 	bl	8002b76 <UART_EndTransmit_IT>
    return;
 8002962:	e004      	b.n	800296e <HAL_UART_IRQHandler+0x34a>
    return;
 8002964:	bf00      	nop
 8002966:	e002      	b.n	800296e <HAL_UART_IRQHandler+0x34a>
      return;
 8002968:	bf00      	nop
 800296a:	e000      	b.n	800296e <HAL_UART_IRQHandler+0x34a>
      return;
 800296c:	bf00      	nop
  }
}
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08002ab1 	.word	0x08002ab1

08002978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d4:	e02c      	b.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d028      	beq.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029e4:	f7fe f9cc 	bl	8000d80 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d21d      	bcs.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e00f      	b.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d0c3      	beq.n	80029d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a6e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff ff66 	bl	800299c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b21      	cmp	r3, #33	; 0x21
 8002aea:	d13e      	bne.n	8002b6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d114      	bne.n	8002b20 <UART_Transmit_IT+0x48>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d110      	bne.n	8002b20 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	1c9a      	adds	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	621a      	str	r2, [r3, #32]
 8002b1e:	e008      	b.n	8002b32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	1c59      	adds	r1, r3, #1
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6211      	str	r1, [r2, #32]
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff feee 	bl	8002978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b22      	cmp	r3, #34	; 0x22
 8002bb8:	f040 8099 	bne.w	8002cee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d117      	bne.n	8002bf6 <UART_Receive_IT+0x50>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d113      	bne.n	8002bf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf4:	e026      	b.n	8002c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	d007      	beq.n	8002c1a <UART_Receive_IT+0x74>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <UART_Receive_IT+0x82>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e008      	b.n	8002c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4619      	mov	r1, r3
 8002c52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d148      	bne.n	8002cea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0220 	bic.w	r2, r2, #32
 8002c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d123      	bne.n	8002ce0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0210 	bic.w	r2, r2, #16
 8002cac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	d10a      	bne.n	8002cd2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fe68 	bl	80029ae <HAL_UARTEx_RxEventCallback>
 8002cde:	e002      	b.n	8002ce6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fe52 	bl	800298a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e002      	b.n	8002cf0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	e000      	b.n	8002cf0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002cee:	2302      	movs	r3, #2
  }
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d32:	f023 030c 	bic.w	r3, r3, #12
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <UART_SetConfig+0x114>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d103      	bne.n	8002d68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d60:	f7fe ff6a 	bl	8001c38 <HAL_RCC_GetPCLK2Freq>
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	e002      	b.n	8002d6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d68:	f7fe ff52 	bl	8001c10 <HAL_RCC_GetPCLK1Freq>
 8002d6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009a      	lsls	r2, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <UART_SetConfig+0x118>)
 8002d86:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	0119      	lsls	r1, r3, #4
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <UART_SetConfig+0x118>)
 8002da6:	fba3 0302 	umull	r0, r3, r3, r2
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	2064      	movs	r0, #100	; 0x64
 8002dae:	fb00 f303 	mul.w	r3, r0, r3
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	3332      	adds	r3, #50	; 0x32
 8002db8:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <UART_SetConfig+0x118>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc4:	4419      	add	r1, r3
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <UART_SetConfig+0x118>)
 8002dde:	fba3 0302 	umull	r0, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2064      	movs	r0, #100	; 0x64
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	3332      	adds	r3, #50	; 0x32
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <UART_SetConfig+0x118>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	f003 020f 	and.w	r2, r3, #15
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	440a      	add	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	51eb851f 	.word	0x51eb851f

08002e14 <__libc_init_array>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2600      	movs	r6, #0
 8002e18:	4d0c      	ldr	r5, [pc, #48]	; (8002e4c <__libc_init_array+0x38>)
 8002e1a:	4c0d      	ldr	r4, [pc, #52]	; (8002e50 <__libc_init_array+0x3c>)
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	42a6      	cmp	r6, r4
 8002e22:	d109      	bne.n	8002e38 <__libc_init_array+0x24>
 8002e24:	f000 f88e 	bl	8002f44 <_init>
 8002e28:	2600      	movs	r6, #0
 8002e2a:	4d0a      	ldr	r5, [pc, #40]	; (8002e54 <__libc_init_array+0x40>)
 8002e2c:	4c0a      	ldr	r4, [pc, #40]	; (8002e58 <__libc_init_array+0x44>)
 8002e2e:	1b64      	subs	r4, r4, r5
 8002e30:	10a4      	asrs	r4, r4, #2
 8002e32:	42a6      	cmp	r6, r4
 8002e34:	d105      	bne.n	8002e42 <__libc_init_array+0x2e>
 8002e36:	bd70      	pop	{r4, r5, r6, pc}
 8002e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3c:	4798      	blx	r3
 8002e3e:	3601      	adds	r6, #1
 8002e40:	e7ee      	b.n	8002e20 <__libc_init_array+0xc>
 8002e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e46:	4798      	blx	r3
 8002e48:	3601      	adds	r6, #1
 8002e4a:	e7f2      	b.n	8002e32 <__libc_init_array+0x1e>
 8002e4c:	08003054 	.word	0x08003054
 8002e50:	08003054 	.word	0x08003054
 8002e54:	08003054 	.word	0x08003054
 8002e58:	08003058 	.word	0x08003058

08002e5c <__itoa>:
 8002e5c:	1e93      	subs	r3, r2, #2
 8002e5e:	2b22      	cmp	r3, #34	; 0x22
 8002e60:	b510      	push	{r4, lr}
 8002e62:	460c      	mov	r4, r1
 8002e64:	d904      	bls.n	8002e70 <__itoa+0x14>
 8002e66:	2300      	movs	r3, #0
 8002e68:	461c      	mov	r4, r3
 8002e6a:	700b      	strb	r3, [r1, #0]
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	bd10      	pop	{r4, pc}
 8002e70:	2a0a      	cmp	r2, #10
 8002e72:	d109      	bne.n	8002e88 <__itoa+0x2c>
 8002e74:	2800      	cmp	r0, #0
 8002e76:	da07      	bge.n	8002e88 <__itoa+0x2c>
 8002e78:	232d      	movs	r3, #45	; 0x2d
 8002e7a:	700b      	strb	r3, [r1, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4240      	negs	r0, r0
 8002e80:	4421      	add	r1, r4
 8002e82:	f000 f81d 	bl	8002ec0 <__utoa>
 8002e86:	e7f1      	b.n	8002e6c <__itoa+0x10>
 8002e88:	2100      	movs	r1, #0
 8002e8a:	e7f9      	b.n	8002e80 <__itoa+0x24>

08002e8c <itoa>:
 8002e8c:	f7ff bfe6 	b.w	8002e5c <__itoa>

08002e90 <memset>:
 8002e90:	4603      	mov	r3, r0
 8002e92:	4402      	add	r2, r0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d100      	bne.n	8002e9a <memset+0xa>
 8002e98:	4770      	bx	lr
 8002e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9e:	e7f9      	b.n	8002e94 <memset+0x4>

08002ea0 <strcat>:
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	b510      	push	{r4, lr}
 8002ea4:	7814      	ldrb	r4, [r2, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	3201      	adds	r2, #1
 8002eaa:	2c00      	cmp	r4, #0
 8002eac:	d1fa      	bne.n	8002ea4 <strcat+0x4>
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002eb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002eb8:	2a00      	cmp	r2, #0
 8002eba:	d1f9      	bne.n	8002eb0 <strcat+0x10>
 8002ebc:	bd10      	pop	{r4, pc}
	...

08002ec0 <__utoa>:
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b08b      	sub	sp, #44	; 0x2c
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	466e      	mov	r6, sp
 8002eca:	4c1d      	ldr	r4, [pc, #116]	; (8002f40 <__utoa+0x80>)
 8002ecc:	f104 0c20 	add.w	ip, r4, #32
 8002ed0:	4637      	mov	r7, r6
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	6861      	ldr	r1, [r4, #4]
 8002ed6:	3408      	adds	r4, #8
 8002ed8:	c703      	stmia	r7!, {r0, r1}
 8002eda:	4564      	cmp	r4, ip
 8002edc:	463e      	mov	r6, r7
 8002ede:	d1f7      	bne.n	8002ed0 <__utoa+0x10>
 8002ee0:	7921      	ldrb	r1, [r4, #4]
 8002ee2:	6820      	ldr	r0, [r4, #0]
 8002ee4:	7139      	strb	r1, [r7, #4]
 8002ee6:	1e91      	subs	r1, r2, #2
 8002ee8:	2922      	cmp	r1, #34	; 0x22
 8002eea:	6038      	str	r0, [r7, #0]
 8002eec:	f04f 0100 	mov.w	r1, #0
 8002ef0:	d904      	bls.n	8002efc <__utoa+0x3c>
 8002ef2:	7019      	strb	r1, [r3, #0]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	b00b      	add	sp, #44	; 0x2c
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efc:	1e58      	subs	r0, r3, #1
 8002efe:	4684      	mov	ip, r0
 8002f00:	fbb5 f7f2 	udiv	r7, r5, r2
 8002f04:	fb02 5617 	mls	r6, r2, r7, r5
 8002f08:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002f0c:	4476      	add	r6, lr
 8002f0e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002f12:	460c      	mov	r4, r1
 8002f14:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002f18:	462e      	mov	r6, r5
 8002f1a:	42b2      	cmp	r2, r6
 8002f1c:	463d      	mov	r5, r7
 8002f1e:	f101 0101 	add.w	r1, r1, #1
 8002f22:	d9ed      	bls.n	8002f00 <__utoa+0x40>
 8002f24:	2200      	movs	r2, #0
 8002f26:	545a      	strb	r2, [r3, r1]
 8002f28:	1919      	adds	r1, r3, r4
 8002f2a:	1aa5      	subs	r5, r4, r2
 8002f2c:	42aa      	cmp	r2, r5
 8002f2e:	dae2      	bge.n	8002ef6 <__utoa+0x36>
 8002f30:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002f34:	780e      	ldrb	r6, [r1, #0]
 8002f36:	3201      	adds	r2, #1
 8002f38:	7006      	strb	r6, [r0, #0]
 8002f3a:	f801 5901 	strb.w	r5, [r1], #-1
 8002f3e:	e7f4      	b.n	8002f2a <__utoa+0x6a>
 8002f40:	0800302c 	.word	0x0800302c

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
